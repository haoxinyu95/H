//less也是来写样式的,更之前的css的书写类似,只不过现在多了一些js的思想

//1.变量
//在jS定义变量 var a=1;
//在less 中定义变量 @变量名:值;
@w:100px;
@h:100px;
@color:red;
.box{
  width: @w;
  height: @h;
  background-color: @color;
}
//除此之外还可以使用变量名来定义变量
@word:"珠峰培训";
@zf:"word";
@c:green;
//@@zf-->@(@zf)-->@word->"珠峰培训"
//@zf:"word";
.box:after{
  content: @zf;
  color: @c;
}
.box:before{
  content: @@zf;
  color: yellow;
}
//混合类
.class1{
  font-size: 30px;
  width: 200px;
  height: 200px;
}
.box1{
  //.class1中的样式全都写在box1中了
  .class1;
  background-color: @c;
}
//带参数混合类
//在less 中可以像js使用函数一样定义一个带参数的属性集合
//function sum (a,b){}
//sum(1,2)
.radius(@r){
  //@r:变量,形参
  border-radius:@r;
  -webkit-border-radius:@r;
  -moz-border-radius:@r;
  -ms-border-radius:@r;
  -o-border-radius:@r;
  border-radius:@r;
}
.box1{
  .radius(50%);//50%实参
  border:3px dashed plum;
}
//给参数加默认值
.font(@size:20px){
  font-size: @size;
};
.text1{
  //.font(40px);
  .font();
  //不传参数可以省略括号 .font;
};

//@arguments:所有的参数,参数集合

.border(@x,@y,@z){
  //border: @x @y @z;
  border: @arguments;
}
.text1{
  .border(3px,solid,red)
}

//匹配模式和引导表达式
//定义类的时候,第一个参数是你自己起的名字
.min(a,@color){
  //第一个参数传dark,就会自动匹配这个类
  background-color: darken(@color,20%);
};
.min(b,@color){
  //第一个参数传light,就会自动匹配这个类
  background-color: lighten(@color,20%);
};
.min(@_,@color){
  //不管第一个参数传什么,就会执行这个类
  border-width:10px;
};

.box1{
  //根据第一个参数自动匹配相应的类
  .min(a,yellow);
  //.min(b,yellow);
}

@switch1:d;
@switch2:b;
.f(d,@size){
  font-size: @size;
  font-weight: normal;
}
.f(b,@size){
  font-size: @size;
  font-weight: bold;
}
.f(@_,@size){
  color: #00aaee;
}
.text1{
  .f(@switch1,30px);
  //.f(@switch2,30px);
  //.f(d,30px);
  //.f(b,30px);
}
//注释
/**/

/*
关于color的函数
1.lighten(@color,10%)
意思:return a color which is 10% lighter than @color
2.darken(@color ,10%)
意思:return @Color which is 10% darker than @color
3.saturate(@color,10%)增加饱和度
意思:return @Color which is 10% saturated than @color
4.desaturate(@color,10%)减少饱和度
...
mix(@color1,@color2)混合颜色

hue(@color):返回当前颜色的色调
saturation(@color);获取饱和度
lightness(@color);获取颜色的亮度

*/